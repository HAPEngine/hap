CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(hap)


ADD_DEFINITIONS(
  -D OS_${CMAKE_HOST_SYSTEM_NAME}
  -D CPU_${CMAKE_HOST_SYSTEM_PROCESSOR}
)


# Modify compiler options to be more strict
IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_CC_FLAGS "-std=c99 -Wall -Wextra -pedantic -Wl,--no-as-needed -g --coverage")
ENDIF(CMAKE_COMPILER_IS_GNUCC)


# Setup build output directories
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)

# HAP core library
FILE(GLOB HAP_CORE_SOURCES src/*.c)
ADD_LIBRARY(libhap STATIC ${HAP_CORE_SOURCES})
SET_TARGET_PROPERTIES(libhap PROPERTIES OUTPUT_NAME "hap")
TARGET_INCLUDE_DIRECTORIES(libhap PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
IF(CMAKE_HOST_WIN32)
ELSE(CMAKE_HOST_WIN32)
TARGET_LINK_LIBRARIES(libhap m z dl)
ENDIF(CMAKE_HOST_WIN32)


# HAP modules
FILE(GLOB MODULE_FILES src/lib/*/CMakeLists.txt)
FOREACH(CMAKE_CONFIGURATION ${MODULE_FILES})
  GET_FILENAME_COMPONENT(MODULE_ROOT ${CMAKE_CONFIGURATION} DIRECTORY)
  GET_FILENAME_COMPONENT(MODULE_NAME ${MODULE_ROOT} NAME)
  ADD_SUBDIRECTORY(${MODULE_ROOT})
  TARGET_INCLUDE_DIRECTORIES(hap_${MODULE_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
ENDFOREACH(CMAKE_CONFIGURATION)


# HAP executable
FILE(GLOB CMD_FILES src/cmds/*.c)
FOREACH(CMD_FILE ${CMD_FILES})
  GET_FILENAME_COMPONENT(TARGET_NAME ${CMD_FILE} NAME_WE)
  ADD_EXECUTABLE(${TARGET_NAME} ${CMD_FILE})
  TARGET_LINK_LIBRARIES(${TARGET_NAME} libhap)
  TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
ENDFOREACH(CMD_FILE)
