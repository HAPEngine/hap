CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(hap)


INCLUDE(CheckCXXCompilerFlag)


# Modify compiler options to be more strict
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic -Wl,--no-as-needed")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)


# Setup build output directories
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


# HAP core library
FILE(GLOB HAP_CORE_SOURCES src/*.c)
ADD_LIBRARY(libhap SHARED ${HAP_CORE_SOURCES})
SET_TARGET_PROPERTIES(libhap PROPERTIES OUTPUT_NAME "hap")
TARGET_INCLUDE_DIRECTORIES(libhap PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)


# HAP modules 
FILE(GLOB LIB_FILES src/lib/*.c)
FOREACH(LIB_FILE ${LIB_FILES})
  GET_FILENAME_COMPONENT(TARGET_NAME ${LIB_FILE} NAME_WE)
  ADD_LIBRARY(${TARGET_NAME} SHARED ${LIB_FILE})
  TARGET_LINK_LIBRARIES(${TARGET_NAME} libhap)
  TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDFOREACH(LIB_FILE)


# HAP executable
FILE(GLOB CMD_FILES src/cmds/*.c)
FOREACH(CMD_FILE ${CMD_FILES})
  GET_FILENAME_COMPONENT(TARGET_NAME ${CMD_FILE} NAME_WE)
  ADD_EXECUTABLE(${TARGET_NAME} ${CMD_FILE})
  TARGET_LINK_LIBRARIES(${TARGET_NAME} m z dl libhap)
  TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDFOREACH(CMD_FILE)
