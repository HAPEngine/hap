CMAKE_MINIMUM_REQUIRED(VERSION 3.5)
PROJECT(hap)


ADD_DEFINITIONS(
  -D OS_${CMAKE_HOST_SYSTEM_NAME}
  -D CPU_${CMAKE_HOST_SYSTEM_PROCESSOR}
)


# Use C11
IF(UNIX)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -pedantic")
ENDIF(UNIX)

SET(CMAKE_C_STANDARD 11)


# Set up build types
IF(UNIX)
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O3 -g")
ELSE(UNIX)
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
ENDIF(UNIX)

SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_DEBUG}")

# Setup up build for Windows-specific dependency hell
IF(WIN32)
	# The OpenAL SDK is expected to be copied to .\opt\openal
	SET(OPENALDIR "${CMAKE_SOURCE_DIR}/opt/openal")

	# GLFW should be copied to .\opt\glfw
	SET(GLFW_LOCATION "${CMAKE_SOURCE_DIR}/opt/glfw")
ENDIF(WIN32)

# Setup build output directories
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# HAP modules
IF(UNIX)
SET(HAP_MODULE_LIBRARIES ${HAP_MODULE_LIBRARIES} m z dl)
ENDIF(UNIX)

# HAP core library
FILE(GLOB HAP_CORE_SOURCES src/*.c)
ADD_LIBRARY(libhap STATIC ${HAP_CORE_SOURCES})
SET_TARGET_PROPERTIES(libhap PROPERTIES OUTPUT_NAME "hap")
TARGET_INCLUDE_DIRECTORIES(libhap PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
IF(CMAKE_HOST_WIN32)
ELSE(CMAKE_HOST_WIN32)
TARGET_LINK_LIBRARIES(libhap ${HAP_MODULE_LIBRARIES})
ENDIF(CMAKE_HOST_WIN32)
SET(HAP_LIBRARIES $<TARGET_FILE:libhap>)

FILE(GLOB MODULE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/modules/*/CMakeLists.txt)
FOREACH(CMAKE_CONFIGURATION ${MODULE_FILES})
  GET_FILENAME_COMPONENT(MODULE_ROOT ${CMAKE_CONFIGURATION} DIRECTORY)
  GET_FILENAME_COMPONENT(MODULE_NAME ${MODULE_ROOT} NAME)
  ADD_SUBDIRECTORY(${MODULE_ROOT})
  TARGET_INCLUDE_DIRECTORIES(hap_${MODULE_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDFOREACH(CMAKE_CONFIGURATION)


# HAP executable
FILE(GLOB CMD_FILES src/cmds/*.c)
FOREACH(CMD_FILE ${CMD_FILES})
  GET_FILENAME_COMPONENT(TARGET_NAME ${CMD_FILE} NAME_WE)
  ADD_EXECUTABLE(${TARGET_NAME} ${CMD_FILE})
  TARGET_LINK_LIBRARIES(${TARGET_NAME} libhap ${HAP_MODULE_LIBRARIES})
  TARGET_INCLUDE_DIRECTORIES(${TARGET_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
ENDFOREACH(CMD_FILE)

# Promote libraries to parent scope
SET(HAP_MODULE_LIBRARIES ${HAP_MODULE_LIBRARIES} PARENT_SCOPE)
